{"version":3,"sources":["../../src/deck-renderer.js"],"names":["initializeResources","render","finalizeResources","createDeckRenderer","DeckProps","externalRenderers","DeckRenderer","constructor","view","props","deck","setup","context","gl","call","on","deckInstance","setProps","toJSON","dispose","redraw","requestRender","width","height","size","viewState","latitude","center","longitude","zoom","bearing","camera","heading","pitch","tilt"],"mappings":"AAEA,SAAQA,mBAAR,EAA6BC,MAA7B,EAAqCC,iBAArC,QAA6D,WAA7D;AAEA,eAAe,SAASC,kBAAT,CAA4BC,SAA5B,EAAuCC,iBAAvC,EAA0D;AACvE,QAAMC,YAAN,CAAmB;AACjBC,IAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACvB,WAAKD,IAAL,GAAYA,IAAZ;AACA,WAAKE,IAAL,GAAY,IAAIN,SAAJ,CAAcK,KAAd,CAAZ;AACD;;AAEDE,IAAAA,KAAK,CAACC,OAAD,EAAU;AACb,YAAMC,EAAE,GAAGD,OAAO,CAACC,EAAnB;AACAb,MAAAA,mBAAmB,CAACc,IAApB,CAAyB,IAAzB,EAA+BD,EAA/B;AAEA,WAAKH,IAAL,CAAUK,EAAV,CAAa,QAAb,EAAuBN,KAAK,IAAI,KAAKO,YAAL,CAAkBC,QAAlB,CAA2BR,KAA3B,CAAhC;AAEA,WAAKO,YAAL,CAAkBC,QAAlB,CAA2B,KAAKP,IAAL,CAAUQ,MAAV,EAA3B;AACD;;AAEDC,IAAAA,OAAO,GAAG;AACRjB,MAAAA,iBAAiB,CAACY,IAAlB,CAAuB,IAAvB;AACD;;AAEDM,IAAAA,MAAM,GAAG;AACPf,MAAAA,iBAAiB,CAACgB,aAAlB,CAAgC,KAAKb,IAArC;AACD;;AAEDP,IAAAA,MAAM,CAACW,OAAD,EAAU;AACd,YAAM,CAACU,KAAD,EAAQC,MAAR,IAAkB,KAAKf,IAAL,CAAUgB,IAAlC;AAEAvB,MAAAA,MAAM,CAACa,IAAP,CAAY,IAAZ,EAAkB;AAChBD,QAAAA,EAAE,EAAED,OAAO,CAACC,EADI;AAEhBS,QAAAA,KAFgB;AAGhBC,QAAAA,MAHgB;AAIhBE,QAAAA,SAAS,EAAE;AACTC,UAAAA,QAAQ,EAAE,KAAKlB,IAAL,CAAUmB,MAAV,CAAiBD,QADlB;AAETE,UAAAA,SAAS,EAAE,KAAKpB,IAAL,CAAUmB,MAAV,CAAiBC,SAFnB;AAGTC,UAAAA,IAAI,EAAE,KAAKrB,IAAL,CAAUqB,IAHP;AAITC,UAAAA,OAAO,EAAE,KAAKtB,IAAL,CAAUuB,MAAV,CAAiBC,OAJjB;AAKTC,UAAAA,KAAK,EAAE,KAAKzB,IAAL,CAAUuB,MAAV,CAAiBG;AALf;AAJK,OAAlB;AAYD;;AAtCgB;;AAyCnB,SAAO5B,YAAP;AACD","sourcesContent":["/* eslint-disable no-invalid-this */\n\nimport {initializeResources, render, finalizeResources} from './commons';\n\nexport default function createDeckRenderer(DeckProps, externalRenderers) {\n  class DeckRenderer {\n    constructor(view, props) {\n      this.view = view;\n      this.deck = new DeckProps(props);\n    }\n\n    setup(context) {\n      const gl = context.gl;\n      initializeResources.call(this, gl);\n\n      this.deck.on('change', props => this.deckInstance.setProps(props));\n\n      this.deckInstance.setProps(this.deck.toJSON());\n    }\n\n    dispose() {\n      finalizeResources.call(this);\n    }\n\n    redraw() {\n      externalRenderers.requestRender(this.view);\n    }\n\n    render(context) {\n      const [width, height] = this.view.size;\n\n      render.call(this, {\n        gl: context.gl,\n        width,\n        height,\n        viewState: {\n          latitude: this.view.center.latitude,\n          longitude: this.view.center.longitude,\n          zoom: this.view.zoom,\n          bearing: this.view.camera.heading,\n          pitch: this.view.camera.tilt\n        }\n      });\n    }\n  }\n\n  return DeckRenderer;\n}\n"],"file":"deck-renderer.js"}