import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import createDeckProps from './deck-props';
import createDeckLayer from './deck-layer';
import createDeckLayerView2D from './deck-layer-view-2d';
import createDeckRenderer from './deck-renderer';
import { loadModules as esriLoaderLoadModules } from 'esri-loader';
let arcGIS = null;
export async function loadArcGISModules(modules, loadScriptOptions) {
  const namespace = Array.isArray(modules) ? null : modules;
  await loadArcGISModule(namespace, loadScriptOptions);

  if (Array.isArray(modules)) {
    return esriLoaderLoadModules(modules, loadScriptOptions).then(array => {
      return _objectSpread({}, arcGIS, {
        modules: array
      });
    });
  }

  return arcGIS;
}

function loadArcGISModule(esri, loadScriptOptions) {
  if (arcGIS) {
    return arcGIS;
  }

  if (esri) {
    const Layer = esri.layers.Layer;
    const Accessor = esri.core.Accessor;
    const BaseLayerViewGL2D = esri.views['2d'].layers.BaseLayerViewGL2D;
    const externalRenderers = esri.views['3d'].externalRenderers;
    return initialize(Layer, Accessor, BaseLayerViewGL2D, externalRenderers);
  }

  return esriLoaderLoadModules(['esri/layers/Layer', 'esri/core/Accessor', 'esri/views/2d/layers/BaseLayerViewGL2D', 'esri/views/3d/externalRenderers'], loadScriptOptions).then(([Layer, Accessor, BaseLayerViewGL2D, externalRenderers]) => {
    return initialize(Layer, Accessor, BaseLayerViewGL2D, externalRenderers);
  });
}

function initialize(Layer, Accessor, BaseLayerViewGL2D, externalRenderers) {
  const DeckProps = createDeckProps(Accessor);
  const DeckLayerView2D = createDeckLayerView2D(BaseLayerViewGL2D);
  const DeckLayer = createDeckLayer(DeckProps, Layer, DeckLayerView2D);
  const DeckRenderer = createDeckRenderer(DeckProps, externalRenderers);
  arcGIS = {
    DeckLayer,
    DeckRenderer
  };
  return arcGIS;
}
//# sourceMappingURL=index.js.map