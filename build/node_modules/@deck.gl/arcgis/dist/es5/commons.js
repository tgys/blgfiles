"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeResources = initializeResources;
exports.render = render;
exports.finalizeResources = finalizeResources;

var _core = require("@deck.gl/core");

var _core2 = require("@luma.gl/core");

function initializeResources(gl) {
  var _this = this;

  (0, _core2.instrumentGLContext)(gl);
  this.buffer = new _core2.Buffer(gl, new Int8Array([-1, -1, 1, -1, -1, 1, 1, 1]));
  this.model = new _core2.Model(gl, {
    vs: "\n      attribute vec2 a_pos;\n      varying vec2 v_texcoord;\n      void main(void) {\n          gl_Position = vec4(a_pos, 0.0, 1.0);\n          v_texcoord = (a_pos + 1.0) / 2.0;\n      }\n    ",
    fs: "\n      precision mediump float;\n      uniform sampler2D u_texture;\n      varying vec2 v_texcoord;\n      void main(void) {\n          vec4 rgba = texture2D(u_texture, v_texcoord);\n          rgba.rgb *= rgba.a;\n          gl_FragColor = rgba;\n      }\n    ",
    attributes: {
      a_pos: this.buffer
    },
    vertexCount: 4,
    drawMode: 5
  });
  this.deckFbo = new _core2.Framebuffer(gl, {
    width: 1,
    height: 1
  });
  this.deckInstance = new _core.Deck({
    viewState: {},
    controller: false,
    gl: gl,
    _framebuffer: this.deckFbo,
    _customRender: function _customRender(redrawReason) {
      if (redrawReason === 'arcgis') {
        _this.deckInstance._drawLayers(redrawReason);
      } else {
        _this.redraw();
      }
    }
  });
}

function render(_ref) {
  var _this2 = this;

  var gl = _ref.gl,
      width = _ref.width,
      height = _ref.height,
      viewState = _ref.viewState;
  var screenFbo = gl.getParameter(36006);
  var dpr = window.devicePixelRatio;
  width = Math.round(width * dpr);
  height = Math.round(height * dpr);
  this.deckFbo.resize({
    width: width,
    height: height
  });
  this.deckInstance.setProps({
    viewState: viewState
  });
  this.deckInstance.redraw('arcgis');
  (0, _core2.withParameters)(gl, {
    blend: true,
    blendFunc: [1, 771],
    framebuffer: screenFbo,
    viewport: [0, 0, width, height]
  }, function () {
    _this2.model.setUniforms({
      u_texture: _this2.deckFbo
    }).draw();
  });
}

function finalizeResources() {
  if (this.deckInstance) {
    this.deckInstance.finalize();
    this.deckInstance = null;
  }

  if (this.model) {
    this.model["delete"]();
  }

  if (this.buffer) {
    this.buffer["delete"]();
  }

  if (this.deckFbo) {
    this.deckFbo["delete"]();
  }
}
//# sourceMappingURL=commons.js.map