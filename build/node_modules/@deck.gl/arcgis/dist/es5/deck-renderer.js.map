{"version":3,"sources":["../../src/deck-renderer.js"],"names":["createDeckRenderer","DeckProps","externalRenderers","DeckRenderer","view","props","deck","context","gl","initializeResources","call","on","deckInstance","setProps","toJSON","finalizeResources","requestRender","size","width","height","render","viewState","latitude","center","longitude","zoom","bearing","camera","heading","pitch","tilt"],"mappings":";;;;;;;;;;;;;;;AAEA;;AAEe,SAASA,kBAAT,CAA4BC,SAA5B,EAAuCC,iBAAvC,EAA0D;AAAA,MACjEC,YADiE;AAErE,0BAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AAAA;AACvB,WAAKD,IAAL,GAAYA,IAAZ;AACA,WAAKE,IAAL,GAAY,IAAIL,SAAJ,CAAcI,KAAd,CAAZ;AACD;;AALoE;AAAA;AAAA,4BAO/DE,OAP+D,EAOtD;AAAA;;AACb,YAAMC,EAAE,GAAGD,OAAO,CAACC,EAAnB;;AACAC,qCAAoBC,IAApB,CAAyB,IAAzB,EAA+BF,EAA/B;;AAEA,aAAKF,IAAL,CAAUK,EAAV,CAAa,QAAb,EAAuB,UAAAN,KAAK;AAAA,iBAAI,KAAI,CAACO,YAAL,CAAkBC,QAAlB,CAA2BR,KAA3B,CAAJ;AAAA,SAA5B;AAEA,aAAKO,YAAL,CAAkBC,QAAlB,CAA2B,KAAKP,IAAL,CAAUQ,MAAV,EAA3B;AACD;AAdoE;AAAA;AAAA,gCAgB3D;AACRC,mCAAkBL,IAAlB,CAAuB,IAAvB;AACD;AAlBoE;AAAA;AAAA,+BAoB5D;AACPR,QAAAA,iBAAiB,CAACc,aAAlB,CAAgC,KAAKZ,IAArC;AACD;AAtBoE;AAAA;AAAA,6BAwB9DG,OAxB8D,EAwBrD;AAAA,8DACU,KAAKH,IAAL,CAAUa,IADpB;AAAA,YACPC,KADO;AAAA,YACAC,MADA;;AAGdC,wBAAOV,IAAP,CAAY,IAAZ,EAAkB;AAChBF,UAAAA,EAAE,EAAED,OAAO,CAACC,EADI;AAEhBU,UAAAA,KAAK,EAALA,KAFgB;AAGhBC,UAAAA,MAAM,EAANA,MAHgB;AAIhBE,UAAAA,SAAS,EAAE;AACTC,YAAAA,QAAQ,EAAE,KAAKlB,IAAL,CAAUmB,MAAV,CAAiBD,QADlB;AAETE,YAAAA,SAAS,EAAE,KAAKpB,IAAL,CAAUmB,MAAV,CAAiBC,SAFnB;AAGTC,YAAAA,IAAI,EAAE,KAAKrB,IAAL,CAAUqB,IAHP;AAITC,YAAAA,OAAO,EAAE,KAAKtB,IAAL,CAAUuB,MAAV,CAAiBC,OAJjB;AAKTC,YAAAA,KAAK,EAAE,KAAKzB,IAAL,CAAUuB,MAAV,CAAiBG;AALf;AAJK,SAAlB;AAYD;AAvCoE;AAAA;AAAA;;AA0CvE,SAAO3B,YAAP;AACD","sourcesContent":["/* eslint-disable no-invalid-this */\n\nimport {initializeResources, render, finalizeResources} from './commons';\n\nexport default function createDeckRenderer(DeckProps, externalRenderers) {\n  class DeckRenderer {\n    constructor(view, props) {\n      this.view = view;\n      this.deck = new DeckProps(props);\n    }\n\n    setup(context) {\n      const gl = context.gl;\n      initializeResources.call(this, gl);\n\n      this.deck.on('change', props => this.deckInstance.setProps(props));\n\n      this.deckInstance.setProps(this.deck.toJSON());\n    }\n\n    dispose() {\n      finalizeResources.call(this);\n    }\n\n    redraw() {\n      externalRenderers.requestRender(this.view);\n    }\n\n    render(context) {\n      const [width, height] = this.view.size;\n\n      render.call(this, {\n        gl: context.gl,\n        width,\n        height,\n        viewState: {\n          latitude: this.view.center.latitude,\n          longitude: this.view.center.longitude,\n          zoom: this.view.zoom,\n          bearing: this.view.camera.heading,\n          pitch: this.view.camera.tilt\n        }\n      });\n    }\n  }\n\n  return DeckRenderer;\n}\n"],"file":"deck-renderer.js"}