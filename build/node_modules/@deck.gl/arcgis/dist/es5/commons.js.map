{"version":3,"sources":["../../src/commons.js"],"names":["initializeResources","gl","buffer","Buffer","Int8Array","model","Model","vs","fs","attributes","a_pos","vertexCount","drawMode","deckFbo","Framebuffer","width","height","deckInstance","Deck","viewState","controller","_framebuffer","_customRender","redrawReason","_drawLayers","redraw","render","screenFbo","getParameter","dpr","window","devicePixelRatio","Math","round","resize","setProps","blend","blendFunc","framebuffer","viewport","setUniforms","u_texture","draw","finalizeResources","finalize"],"mappings":"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","sourcesContent":["/* eslint-disable no-invalid-this */\n\nimport {Deck} from '@deck.gl/core';\nimport {Model, Buffer, Framebuffer, instrumentGLContext, withParameters} from '@luma.gl/core';\n\nexport function initializeResources(gl) {\n  instrumentGLContext(gl);\n\n  this.buffer = new Buffer(gl, new Int8Array([-1, -1, 1, -1, -1, 1, 1, 1]));\n\n  this.model = new Model(gl, {\n    vs: `\n      attribute vec2 a_pos;\n      varying vec2 v_texcoord;\n      void main(void) {\n          gl_Position = vec4(a_pos, 0.0, 1.0);\n          v_texcoord = (a_pos + 1.0) / 2.0;\n      }\n    `,\n    fs: `\n      precision mediump float;\n      uniform sampler2D u_texture;\n      varying vec2 v_texcoord;\n      void main(void) {\n          vec4 rgba = texture2D(u_texture, v_texcoord);\n          rgba.rgb *= rgba.a;\n          gl_FragColor = rgba;\n      }\n    `,\n    attributes: {\n      a_pos: this.buffer\n    },\n    vertexCount: 4,\n    drawMode: gl.TRIANGLE_STRIP\n  });\n\n  this.deckFbo = new Framebuffer(gl, {width: 1, height: 1});\n\n  this.deckInstance = new Deck({\n    // The view state will be set dynamically to track the MapView current extent.\n    viewState: {},\n\n    // Input is handled by the ArcGIS API for JavaScript.\n    controller: false,\n\n    // We use the same WebGL context as the ArcGIS API for JavaScript.\n    gl,\n\n    // This deck renders into an auxiliary framebuffer.\n    _framebuffer: this.deckFbo,\n\n    _customRender: redrawReason => {\n      if (redrawReason === 'arcgis') {\n        this.deckInstance._drawLayers(redrawReason);\n      } else {\n        this.redraw();\n      }\n    }\n  });\n}\n\nexport function render({gl, width, height, viewState}) {\n  const screenFbo = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n\n  /* global window */\n  const dpr = window.devicePixelRatio;\n  width = Math.round(width * dpr);\n  height = Math.round(height * dpr);\n\n  this.deckFbo.resize({width, height});\n\n  this.deckInstance.setProps({viewState});\n  // redraw deck immediately into deckFbo\n  this.deckInstance.redraw('arcgis');\n\n  // We overlay the texture on top of the map using the full-screen quad.\n  withParameters(\n    gl,\n    {\n      blend: true,\n      blendFunc: [gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      framebuffer: screenFbo,\n      viewport: [0, 0, width, height]\n    },\n    () => {\n      this.model.setUniforms({u_texture: this.deckFbo}).draw();\n    }\n  );\n}\n\nexport function finalizeResources() {\n  if (this.deckInstance) {\n    this.deckInstance.finalize();\n    this.deckInstance = null;\n  }\n\n  if (this.model) {\n    this.model.delete();\n  }\n\n  if (this.buffer) {\n    this.buffer.delete();\n  }\n\n  if (this.deckFbo) {\n    this.deckFbo.delete();\n  }\n}\n"],"file":"commons.js"}