"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadArcGISModules = loadArcGISModules;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _deckProps = _interopRequireDefault(require("./deck-props"));

var _deckLayer = _interopRequireDefault(require("./deck-layer"));

var _deckLayerView2d = _interopRequireDefault(require("./deck-layer-view-2d"));

var _deckRenderer = _interopRequireDefault(require("./deck-renderer"));

var _esriLoader = require("esri-loader");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var arcGIS = null;

function loadArcGISModules(_x, _x2) {
  return _loadArcGISModules.apply(this, arguments);
}

function _loadArcGISModules() {
  _loadArcGISModules = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(modules, loadScriptOptions) {
    var namespace;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            namespace = Array.isArray(modules) ? null : modules;
            _context.next = 3;
            return loadArcGISModule(namespace, loadScriptOptions);

          case 3:
            if (!Array.isArray(modules)) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", (0, _esriLoader.loadModules)(modules, loadScriptOptions).then(function (array) {
              return _objectSpread({}, arcGIS, {
                modules: array
              });
            }));

          case 5:
            return _context.abrupt("return", arcGIS);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadArcGISModules.apply(this, arguments);
}

function loadArcGISModule(esri, loadScriptOptions) {
  if (arcGIS) {
    return arcGIS;
  }

  if (esri) {
    var Layer = esri.layers.Layer;
    var Accessor = esri.core.Accessor;
    var BaseLayerViewGL2D = esri.views['2d'].layers.BaseLayerViewGL2D;
    var externalRenderers = esri.views['3d'].externalRenderers;
    return initialize(Layer, Accessor, BaseLayerViewGL2D, externalRenderers);
  }

  return (0, _esriLoader.loadModules)(['esri/layers/Layer', 'esri/core/Accessor', 'esri/views/2d/layers/BaseLayerViewGL2D', 'esri/views/3d/externalRenderers'], loadScriptOptions).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 4),
        Layer = _ref2[0],
        Accessor = _ref2[1],
        BaseLayerViewGL2D = _ref2[2],
        externalRenderers = _ref2[3];

    return initialize(Layer, Accessor, BaseLayerViewGL2D, externalRenderers);
  });
}

function initialize(Layer, Accessor, BaseLayerViewGL2D, externalRenderers) {
  var DeckProps = (0, _deckProps["default"])(Accessor);
  var DeckLayerView2D = (0, _deckLayerView2d["default"])(BaseLayerViewGL2D);
  var DeckLayer = (0, _deckLayer["default"])(DeckProps, Layer, DeckLayerView2D);
  var DeckRenderer = (0, _deckRenderer["default"])(DeckProps, externalRenderers);
  arcGIS = {
    DeckLayer: DeckLayer,
    DeckRenderer: DeckRenderer
  };
  return arcGIS;
}
//# sourceMappingURL=index.js.map