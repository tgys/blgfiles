{"version":3,"sources":["../../src/commons.js"],"names":["Deck","Model","Buffer","Framebuffer","instrumentGLContext","withParameters","initializeResources","gl","buffer","Int8Array","model","vs","fs","attributes","a_pos","vertexCount","drawMode","deckFbo","width","height","deckInstance","viewState","controller","_framebuffer","_customRender","redrawReason","_drawLayers","redraw","render","screenFbo","getParameter","dpr","window","devicePixelRatio","Math","round","resize","setProps","blend","blendFunc","framebuffer","viewport","setUniforms","u_texture","draw","finalizeResources","finalize"],"mappings":"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","sourcesContent":["/* eslint-disable no-invalid-this */\n\nimport {Deck} from '@deck.gl/core';\nimport {Model, Buffer, Framebuffer, instrumentGLContext, withParameters} from '@luma.gl/core';\n\nexport function initializeResources(gl) {\n  instrumentGLContext(gl);\n\n  this.buffer = new Buffer(gl, new Int8Array([-1, -1, 1, -1, -1, 1, 1, 1]));\n\n  this.model = new Model(gl, {\n    vs: `\n      attribute vec2 a_pos;\n      varying vec2 v_texcoord;\n      void main(void) {\n          gl_Position = vec4(a_pos, 0.0, 1.0);\n          v_texcoord = (a_pos + 1.0) / 2.0;\n      }\n    `,\n    fs: `\n      precision mediump float;\n      uniform sampler2D u_texture;\n      varying vec2 v_texcoord;\n      void main(void) {\n          vec4 rgba = texture2D(u_texture, v_texcoord);\n          rgba.rgb *= rgba.a;\n          gl_FragColor = rgba;\n      }\n    `,\n    attributes: {\n      a_pos: this.buffer\n    },\n    vertexCount: 4,\n    drawMode: gl.TRIANGLE_STRIP\n  });\n\n  this.deckFbo = new Framebuffer(gl, {width: 1, height: 1});\n\n  this.deckInstance = new Deck({\n    // The view state will be set dynamically to track the MapView current extent.\n    viewState: {},\n\n    // Input is handled by the ArcGIS API for JavaScript.\n    controller: false,\n\n    // We use the same WebGL context as the ArcGIS API for JavaScript.\n    gl,\n\n    // This deck renders into an auxiliary framebuffer.\n    _framebuffer: this.deckFbo,\n\n    _customRender: redrawReason => {\n      if (redrawReason === 'arcgis') {\n        this.deckInstance._drawLayers(redrawReason);\n      } else {\n        this.redraw();\n      }\n    }\n  });\n}\n\nexport function render({gl, width, height, viewState}) {\n  const screenFbo = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n\n  /* global window */\n  const dpr = window.devicePixelRatio;\n  width = Math.round(width * dpr);\n  height = Math.round(height * dpr);\n\n  this.deckFbo.resize({width, height});\n\n  this.deckInstance.setProps({viewState});\n  // redraw deck immediately into deckFbo\n  this.deckInstance.redraw('arcgis');\n\n  // We overlay the texture on top of the map using the full-screen quad.\n  withParameters(\n    gl,\n    {\n      blend: true,\n      blendFunc: [gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      framebuffer: screenFbo,\n      viewport: [0, 0, width, height]\n    },\n    () => {\n      this.model.setUniforms({u_texture: this.deckFbo}).draw();\n    }\n  );\n}\n\nexport function finalizeResources() {\n  if (this.deckInstance) {\n    this.deckInstance.finalize();\n    this.deckInstance = null;\n  }\n\n  if (this.model) {\n    this.model.delete();\n  }\n\n  if (this.buffer) {\n    this.buffer.delete();\n  }\n\n  if (this.deckFbo) {\n    this.deckFbo.delete();\n  }\n}\n"],"file":"commons.js"}