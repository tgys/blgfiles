import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { initializeResources, render as _render, finalizeResources } from './commons';
export default function createDeckRenderer(DeckProps, externalRenderers) {
  var DeckRenderer = function () {
    function DeckRenderer(view, props) {
      _classCallCheck(this, DeckRenderer);

      this.view = view;
      this.deck = new DeckProps(props);
    }

    _createClass(DeckRenderer, [{
      key: "setup",
      value: function setup(context) {
        var _this = this;

        var gl = context.gl;
        initializeResources.call(this, gl);
        this.deck.on('change', function (props) {
          return _this.deckInstance.setProps(props);
        });
        this.deckInstance.setProps(this.deck.toJSON());
      }
    }, {
      key: "dispose",
      value: function dispose() {
        finalizeResources.call(this);
      }
    }, {
      key: "redraw",
      value: function redraw() {
        externalRenderers.requestRender(this.view);
      }
    }, {
      key: "render",
      value: function render(context) {
        var _this$view$size = _slicedToArray(this.view.size, 2),
            width = _this$view$size[0],
            height = _this$view$size[1];

        _render.call(this, {
          gl: context.gl,
          width: width,
          height: height,
          viewState: {
            latitude: this.view.center.latitude,
            longitude: this.view.center.longitude,
            zoom: this.view.zoom,
            bearing: this.view.camera.heading,
            pitch: this.view.camera.tilt
          }
        });
      }
    }]);

    return DeckRenderer;
  }();

  return DeckRenderer;
}
//# sourceMappingURL=deck-renderer.js.map